<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://alemangui.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://alemangui.github.io/" rel="alternate" type="text/html" /><updated>2020-02-15T19:49:17+01:00</updated><id>http://alemangui.github.io/</id><title type="html">Alejandro MG</title><subtitle>Développement logiciel, web audio, et al</subtitle><entry><title type="html">Mesurer la performance avec Locust</title><link href="http://alemangui.github.io/locust" rel="alternate" type="text/html" title="Mesurer la performance avec Locust" /><published>2020-02-11T00:00:00+01:00</published><updated>2020-02-11T00:00:00+01:00</updated><id>http://alemangui.github.io/locust</id><content type="html" xml:base="http://alemangui.github.io/locust">&lt;p&gt;Toute application doit pouvoir répondre à un certain nombre de requêtes sous un temps minimum jugé comme acceptable. Ceci peut varier énormément. Google fait face à des millions d’utilisateurs et se fixe des objectifs de performance très ambitieux. D’un autre côté, un système de gestion d’inventaires d’une petite épicerie difficilement aura plus d’une poignée d’utilisateurs et n’aura pas les mêmes contraintes de temps de réponse.&lt;/p&gt;

&lt;p&gt;Les tests de charge servent à assurer que notre application réponde à nos objectifs liés au nombre d’utilisateurs simultanées et temps de réponse. C’est là que &lt;a href=&quot;https://locust.io/&quot;&gt;Locust&lt;/a&gt; rentre en action : un outil pour simuler des utilisateurs virtuels et permettre leur analyse. Par rapport aux alternatives Locust a un grand plus : on écrit nos tests en Python pur et dur.&lt;/p&gt;

&lt;h2 id=&quot;préparons-le-terrain&quot;&gt;Préparons le terrain&lt;/h2&gt;

&lt;p&gt;Avant de jouer avec Locust, il faut bien qu’on ait quelque chose à tester. Pour le fun, nous allons faire un hello-world avec Flask.&lt;/p&gt;

&lt;p&gt;Je vais d’abord démarrer un environnement virtuel avec Python 3 dans un dossier vide, suivi de l’installation de Flask avec &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;» virtualenv &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; python3 venv
» &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; venv/bin/activate
» pip install flask&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Créons maintenant un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.py&lt;/code&gt; avec le code disponible dans le &lt;a href=&quot;https://flask.palletsprojects.com/en/1.1.x/quickstart/#a-minimal-application&quot;&gt;site Flask&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello, World!'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et voilà, nous avons un endpoint sur &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:5000/&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;» &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FLASK_APP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hello.py&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; flask run
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Serving Flask app &lt;span class=&quot;s2&quot;&gt;&quot;hello.py&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Debug mode: off
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Running on http://127.0.0.1:5000/ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;locust-entre-en-jeu&quot;&gt;Locust entre en jeu&lt;/h2&gt;

&lt;p&gt;Locust permet de simuler de milliers d’utilisateurs simultanés sur notre app. Derrière le rideau, il crée un processus léger via gevent (plus précisément un &lt;a href=&quot;http://www.gevent.org/api/gevent.greenlet.html&quot;&gt;greenlet&lt;/a&gt;) par utilisateur simulé. Ce choix technique permet de simuler un grand nombre d’usagers sur une seule machine.&lt;/p&gt;

&lt;p&gt;Commençons par créer un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;locustfile.py&lt;/code&gt;. Ce fichier servira pour décrire les tests de charge.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;locust&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpLocust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserBehaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@task&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebsiteUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpLocust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserBehaviour&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;La class &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBehaviour&lt;/code&gt; nous permet de définir l’activité que les usagers vont mener. Dans notre cas il y a un seul et unique endpoint à la racine qu’on represente ici avec la fonction &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; décoré avec &lt;code class=&quot;highlighter-rouge&quot;&gt;@task&lt;/code&gt; pour indiquer à Locust qu’il s’agit d’une tâche que les utilisateurs vont effectuer.&lt;/p&gt;

&lt;p&gt;La class &lt;code class=&quot;highlighter-rouge&quot;&gt;WebsiteUser&lt;/code&gt; represente l’utilisateur lui même. On spécifie la &lt;code class=&quot;highlighter-rouge&quot;&gt;task_set&lt;/code&gt; qu’il réalisera ainsi que le temps qu’il attend entre chaque tâche - entre cinq et neuf secondes dans notre cas.&lt;/p&gt;

&lt;p&gt;Si vous avez nommé ce fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;locustfile.py&lt;/code&gt; il suffit de taper &lt;code class=&quot;highlighter-rouge&quot;&gt;locust&lt;/code&gt; dans la console pour tout démarrer. Si vous l’avez nommé différemment il faudra ajouter &lt;code class=&quot;highlighter-rouge&quot;&gt;-f &amp;lt;&amp;lt;path-to-file&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;» locust
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;date&amp;gt;] /INFO/locust.main: Starting web monitor at http://&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:8089
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;date&amp;gt;] /INFO/locust.main: Starting Locust 0.14.4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Locust a mis en place l’interface web sur &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8089&lt;/code&gt;. Cette interface nous permet de spécifier le nombre d’usagers à simuler, le taux de création de ces utilisateurs et l’URL de l’application à tester. Démarrons nos tests avec 100 utilisateurs avec un taux de croissance de dix par seconde. Vu que notre hello-world Flask tourne toujours sur le port &lt;code class=&quot;highlighter-rouge&quot;&gt;:5000&lt;/code&gt; on peut le remplir comme cela :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/locust-1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Après avoir appuyé sur le bouton &lt;em&gt;start swarming&lt;/em&gt; le test se met en œuvre. Dans l’entête de la page on trouve le nombre d’utilisateurs simultanées, les requêtes par seconde (RPS) et le pourcentage d’échec. Plus bas, dans la table on peut aussi connaître le temps de réponse de notre application.&lt;/p&gt;

&lt;p&gt;Notez aussi les onglets :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Charts&lt;/em&gt; contient des visualisations concernant les temps de réponse, les requêtes par seconde et le nombre d’usagers,&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Failures&lt;/em&gt; et &lt;em&gt;Exceptions&lt;/em&gt; donne davantage d’information sur les problèmes rencontrés lors du test, et&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Download Data&lt;/em&gt; permet de télécharger les données bruts en CSV.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/locust-2.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;plus-dendpoints&quot;&gt;Plus d’endpoints&lt;/h2&gt;

&lt;p&gt;Dans la vie réelle on voudra tester des applications qui ont plus d’un endpoint. Par exemple, on peut avoir de comptes utilisateur (et donc un &lt;code class=&quot;highlighter-rouge&quot;&gt;/login&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;/logout&lt;/code&gt;). Puis on pourrait aussi mettre à disposition un endpoint pour paramétrer le compte (&lt;code class=&quot;highlighter-rouge&quot;&gt;/account&lt;/code&gt;) ainsi qu’un autre pour accéder au panier d’achat (&lt;code class=&quot;highlighter-rouge&quot;&gt;/cart&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Ajoutons ces nouvelles routes à notre app Flask sur &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.py&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Home'&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Login'&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/logout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Logout'&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/account'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Account'&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/cart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Cart'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;authentification&quot;&gt;Authentification&lt;/h3&gt;

&lt;p&gt;Cette fois-ci nos utilisateurs doivent s’identifier avant d’accéder aux autres pages. De plus, ils fermeront leur session après avoir fini. Les fonctions &lt;code class=&quot;highlighter-rouge&quot;&gt;on_start&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;on_stop&lt;/code&gt; sont appelées avant l’exécution de la première tâche et après la fin du TaskSet respectivement. C’est donc idéal pour placer l’authentification :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserBehaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/logout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;comportement-des-usagers&quot;&gt;Comportement des usagers&lt;/h3&gt;

&lt;p&gt;Vu le nombre des pages dans notre app, ce serait utile de paramétrer &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBehaviour&lt;/code&gt; pour que les pages ne soient pas toutes visitées pareil. Nous pouvons nous attendre à que la page d’accueil (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) soit souvent visité. D’un autre côté, du fait que les utilisateurs ne paramètrent pas leur compte tous les jours, &lt;code class=&quot;highlighter-rouge&quot;&gt;/account&lt;/code&gt; ne sera pas un passage obligé pour tous. Finalement, le panier d’achat (&lt;code class=&quot;highlighter-rouge&quot;&gt;/cart&lt;/code&gt;) se situe un peu au milieu en terme d’affluence.&lt;/p&gt;

&lt;p&gt;Pour ce faire on s’appuiera sur le décorateur &lt;code class=&quot;highlighter-rouge&quot;&gt;@task&lt;/code&gt;, plus précisément sur son paramètre facultatif entier qui répresente le poids, çad la probabilité qu’un utilisateur choisisse la tâche en question pour son action suivante. Une tâche &lt;code class=&quot;highlighter-rouge&quot;&gt;@task(10)&lt;/code&gt; a dix fois plus de probabilité d’être choisie qu’une tâche &lt;code class=&quot;highlighter-rouge&quot;&gt;@task(1)&lt;/code&gt;. Nous pouvons donc récrire notre &lt;code class=&quot;highlighter-rouge&quot;&gt;locustfile.py&lt;/code&gt; de la façon suivante :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;locust&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpLocust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserBehaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/logout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/cart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/account&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebsiteUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpLocust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserBehaviour&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Si on applique les mêmes paramètres que lors du dernier test, on obtient ces résultats :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/locust-3.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On constate que chacun des 100 utilisateurs s’est identifié et a fini par fermer sa session. Le poids qu’on a assigné aux tâches a bien été respecté : la page d’accueil a été visité autour de dix fois plus que celle de paramétrage du compte et deux fois plus que le panier d’achat.&lt;/p&gt;

&lt;h2 id=&quot;locust-en-mode-distribuée&quot;&gt;Locust en mode distribuée&lt;/h2&gt;

&lt;p&gt;Si nos besoins de simulation sont trop importants pour être faits sur une seule machine, Locust permet d’exécuter les tests de façon distribuée. Il suffit de créer une instance Locust &lt;em&gt;master&lt;/em&gt; (avec l’option &lt;code class=&quot;highlighter-rouge&quot;&gt;-master&lt;/code&gt;) à laquelle on ajoutera des noeuds créés avec l’option &lt;code class=&quot;highlighter-rouge&quot;&gt;slave&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;---master-host&lt;/code&gt; pour indiquer où se trouve l’instance maître.&lt;/p&gt;

&lt;p&gt;Sur une machine on ferait :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;locust &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; mon_locustfile.py &lt;span class=&quot;nt&quot;&gt;--master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et on ajouterait des noeuds avec :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;locust &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; mon_locustfile.py &lt;span class=&quot;nt&quot;&gt;--slave&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--master-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.14&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;en-conclusion&quot;&gt;En conclusion&lt;/h2&gt;

&lt;p&gt;Locust met à disposition des outils simples et puissants pour mesurer le comportement d’un système en fonction de la charge d’utilisateurs simultanés. La courbe d’apprentissage est particulièrement rapide, la documentation est claire et la flexibilité apportée par le choix de Python pour décrire les tests offre des vastes possibilités pour des cas spéciaux. L’interface graphique est plutôt basique, mais les données bruts sont disponibles pour ceux qui ont besoin de les traiter davantage.&lt;/p&gt;

&lt;p&gt;J’ai mis en place Locust pour mon projet actuel et je ne peux que le recommander.&lt;/p&gt;

&lt;h3 id=&quot;comparaison-avec-jmeter&quot;&gt;Comparaison avec JMeter&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://jmeter.apache.org/&quot;&gt;JMeter&lt;/a&gt; est basé sur Java et contient une interface graphique pour décrire nos tests, contrairement à Locust où on se sert du code Python. Je ne trouve pas leur UI très ergonomique : les cas d’usage de base sont plutôt difficiles à effectuer et souvent nécessitent des plugins externes pour fonctionner.&lt;/p&gt;

&lt;h3 id=&quot;comparaison-avec-tsung&quot;&gt;Comparaison avec Tsung&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://tsung.erlang-projects.org/&quot;&gt;Tsung&lt;/a&gt; est basé sur Erlang et la machine virtuelle BEAM, un très bon choix pour une application basé sur des processus légers concurrents. Par contre, Tsung a besoin d’un fichier xml cauchemardesque pour décrire les tests. De plus, le projet a l’air plutôt dormant depuis un an.&lt;/p&gt;</content><author><name></name></author><category term="Développement" /><category term="Python" /><summary type="html">Toute application doit pouvoir répondre à un certain nombre de requêtes sous un temps minimum jugé comme acceptable. Ceci peut varier énormément. Google fait face à des millions d’utilisateurs et se fixe des objectifs de performance très ambitieux. D’un autre côté, un système de gestion d’inventaires d’une petite épicerie difficilement aura plus d’une poignée d’utilisateurs et n’aura pas les mêmes contraintes de temps de réponse.</summary></entry><entry><title type="html">Web Audio: the ugly click and the human ear</title><link href="http://alemangui.github.io/ramp-to-value" rel="alternate" type="text/html" title="Web Audio: the ugly click and the human ear" /><published>2015-12-26T00:00:00+01:00</published><updated>2015-12-26T00:00:00+01:00</updated><id>http://alemangui.github.io/ramp-to-value</id><content type="html" xml:base="http://alemangui.github.io/ramp-to-value">&lt;style&gt;
.button {
    border: none;
    color: white;
    font-weight: bold;
    padding: 10px;
    min-width: 50px;
    min-height: 50px;
    border-radius: 5px;
    position: relative;
    -webkit-appearance: button;
    cursor: pointer;
    text-transform: none;
}

.stop-button {
    background-color: rgb(178, 78, 78);
    border-radius: 5px 0px 0px 5px;
}

.stop-button:hover {
    background-color: rgb(200, 106, 106);
}

.stop-button:before {
    content: &quot;&quot;;
    position: absolute;
    left: 15px;
    width: 21px;
    height: 21px;
    margin-top: -10px;
    background: white;
}

.play-button {
    background-color: rgb(103, 178, 78);
    min-width: 100px;
    border-radius: 0px 5px 5px 0px;
}

.play-button:hover {
    background-color: rgb(126, 200, 101);
}

.play-button:before {
    content: &quot;&quot;;
    position: absolute;
    left: 38px;
    border: 8px solid transparent;
    border-width: 12px 30px;
    border-left-color: #FFFFFF;
    margin-top: -12px;
    background: transparent;
}
&lt;/style&gt;

&lt;p&gt;While playing around with a Web Audio demo, I noticed a clicking sound every time a I stopped an oscillator.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AudioContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oscillatorNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillatorNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// click!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;button class=&quot;button stop-button&quot; id=&quot;1-stop-button&quot;&gt;&lt;/button&gt;
&lt;button class=&quot;button play-button&quot; id=&quot;1-play-button&quot;&gt;&lt;/button&gt;
&lt;script&gt;
	var context = new AudioContext();
	var oscillator;
	var firstIsPlaying;
	(function() {
		document.getElementById('1-play-button').addEventListener('click', function() {
			if(firstIsPlaying) return;
			oscillator = context.createOscillator();
			oscillator.connect(context.destination);
			oscillator.start();
			firstIsPlaying = true;
		}, false);
		document.getElementById('1-stop-button').addEventListener('click', function() {
			if (!firstIsPlaying) return;
			oscillator.stop();
			firstIsPlaying = false;
		}, false);		
	})();
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As the noob I am, I wondered why this happened. Could it be an implementation problem on the browser? Not likely, since this happened in all browsers I tested.&lt;/p&gt;

&lt;p&gt;Turns out the click sound happens because I’m abruptingly cutting the sound wave at a point other than the natural zero crossing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/zero-crossing-point.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Is there a way to avoid this clicking sound then?&lt;/p&gt;

&lt;p&gt;We have two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stopping the sound only at zero-point crossings, or&lt;/li&gt;
  &lt;li&gt;Creating a node gain to gradually decrease the gain to zero before stopping&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will focus on the second option since - luckily - Web Audio API has us covered.&lt;/p&gt;

&lt;h2 id=&quot;gradual-changes-to-an-audioparam-value&quot;&gt;Gradual changes to an audioParam value&lt;/h2&gt;

&lt;h3 id=&quot;exponential-vs-linear&quot;&gt;Exponential vs linear&lt;/h3&gt;

&lt;p&gt;There are several Web Audio functions that can gradually change an audioParam:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;linearRampToValueAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// linear&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exponentialRampToValueAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// exponential&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTargetAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timeConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// exponential&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One difference between them is the easing function that is used to change the audio param value; either linear (left) or exponential (right).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/exponential-linear-curves.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mozilla has a piece of advise to those unsure of which one to use:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Exponential ramps are considered more useful when changing frequencies or playback rates than linear ramps because of the way the human ear works.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And they are right: the human ear perceives sound on a logarithmic principle. An A3 note is a frequency of 220Hz, whereas A4 is 440Hz and A5 is 880Hz. Loudness also works this way: a tenfold increase in sound power could be described as being twice as loud. Hence, using an exponential gain decrease will be perceived as linear by the human ear.&lt;/p&gt;

&lt;h3 id=&quot;exponentialramptovalueattime-vs-settargetattime&quot;&gt;exponentialRampToValueAtTime vs setTargetAtTime&lt;/h3&gt;

&lt;p&gt;We will choose and exponential way of gradually decreasing the gain. This leaves us with &lt;code class=&quot;highlighter-rouge&quot;&gt;exponentialRampToValueAtTime&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt;. Some difference between them are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exponentialRampToValueAtTime&lt;/code&gt; will get to the value precisely at the time specified. However, using this function, an exponential ramp to zero &lt;a href=&quot;https://webaudio.github.io/web-audio-api/#widl-AudioParam-exponentialRampToValueAtTime-AudioParam-float-value-double-endTime&quot;&gt;is not possible&lt;/a&gt; because of the math used to calculate the values over time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt; exponentially moves towards the value given by the target parameter, but instead of specifying an end time, we give the function an exponential decay rate after which the value will decrease about 2/3rds. This means we can ask the function to go all the way down to zero. Theoretically it will never really reach zero since it will be exponentially decaying, but in real life it &lt;em&gt;will&lt;/em&gt; as soon as the value is too small to be represented with a float.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s choose &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt; because we want to go all the way down to zero and because we are not too worried about getting there at a super precise time. As long as the fade-out time is fast enough to be imperceptible but slow enough to remove the click, we will be happy.&lt;/p&gt;

&lt;h3 id=&quot;using-settargetattime-to-remove-the-click&quot;&gt;Using setTargetAtTime to remove the click&lt;/h3&gt;

&lt;p&gt;Before trying out &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt; to get rid of the ugly click, we must be of a couple gotchas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We must choose a decay time after which the gain value will decrease about 2/3rds. After a bit of experimenting, I found out that a decay time of 15 milliseconds gives the impression of being immediate but at the same time removes the click. Remember: Web Audio uses seconds instead of milliseconds!&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AudioContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createGain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;stopButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTargetAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;button class=&quot;button stop-button&quot; id=&quot;2-stop-button&quot;&gt;&lt;/button&gt;
&lt;button class=&quot;button play-button&quot; id=&quot;2-play-button&quot;&gt;&lt;/button&gt;
&lt;script&gt;
	var gainNode;
	var secondIsPlaying;
	(function() {
		document.getElementById('2-play-button').addEventListener('click', function() {
			if(secondIsPlaying) return;
			gainNode = context.createGain();
			oscillator = context.createOscillator();
			oscillator.connect(gainNode);
			gainNode.connect(context.destination);
			oscillator.start();
			secondIsPlaying = true;
		}, false);
		document.getElementById('2-stop-button').addEventListener('click', function() {
			if (!secondIsPlaying) return;
			gainNode.gain.setTargetAtTime(0, context.currentTime, 0.015);
			setTimeout(function() {
				oscillator.stop();
				secondIsPlaying = false;
			}, 40);
		}, false);		
	})();
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;There’s no more click. We are all happy.&lt;/p&gt;

&lt;h3 id=&quot;using-exponentialramptovalueattime-to-remove-the-click&quot;&gt;Using exponentialRampToValueAtTime to remove the click&lt;/h3&gt;

&lt;p&gt;Since we are at it, let’s see how it would’ve turned out using &lt;code class=&quot;highlighter-rouge&quot;&gt;exponentialRampToValueAtTime&lt;/code&gt; - which I found to be a bit trickier.&lt;/p&gt;

&lt;p&gt;One gotcha is this part of the Web Audio specification:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(exponentialRampToValueAtTime) Schedules an exponential continuous change in parameter value &lt;strong&gt;from the previous scheduled parameter value&lt;/strong&gt; to the given value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;From the previous scheduled parameter value&lt;/em&gt; means that you must first set the audioParam with an automation method before using the ramping function. This usually means using &lt;code class=&quot;highlighter-rouge&quot;&gt;setValueAtTime()&lt;/code&gt; instead of setting the audioParam value directly (in other words, don’t do this: &lt;code class=&quot;highlighter-rouge&quot;&gt;gainNode.gain.value = someValue&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Another gotcha also described in the spec:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is an error if either V0 or V1 is not strictly positive. This also implies &lt;strong&gt;an exponential ramp to 0 is not possible.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we must choose a tiny value, but not zero. As mentioned earlier, we can’t ramp to zero. Also, this time we will use 30 milliseconds as the time for the ramp to occur (this is the total transition time, not the decay time used in &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AudioContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createGain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;stopButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Important! Setting a scheduled parameter value&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setValueAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

    &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exponentialRampToValueAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;button class=&quot;button stop-button&quot; id=&quot;3-stop-button&quot;&gt;&lt;/button&gt;
&lt;button class=&quot;button play-button&quot; id=&quot;3-play-button&quot;&gt;&lt;/button&gt;
&lt;script&gt;
	var gainNode;
	var thirdIsPlaying;
	(function() {
		document.getElementById('3-play-button').addEventListener('click', function() {
			if(thirdIsPlaying) return;
			gainNode = context.createGain();
			oscillator = context.createOscillator();
			oscillator.connect(gainNode);
			gainNode.connect(context.destination);
			oscillator.start();
			thirdIsPlaying = true;
		}, false);
		document.getElementById('3-stop-button').addEventListener('click', function() {
			if (!thirdIsPlaying) return;
			gainNode.gain.setValueAtTime(gainNode.gain.value, context.currentTime);
			gainNode.gain.exponentialRampToValueAtTime(0.0001, context.currentTime + 0.03);
			setTimeout(function() {
				oscillator.stop();
				thirdIsPlaying = false;
			}, 30);
		}, false);		
	})();
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Also works, we’ve gotten rid of the click.&lt;/p&gt;

&lt;h2 id=&quot;more-info&quot;&gt;More info&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.audiocheck.net/soundtests_nonlinear.php&quot;&gt;The non-linearities of the human ear&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/webaudio/#AudioParam&quot;&gt;The AudioParam interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime&quot;&gt;Mozilla’s documentation for setTargetAtTime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime&quot;&gt;Mozilla’s documentation for exponentialRampToValueAtTime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Web audio" /><category term="JS" /><summary type="html"></summary></entry></feed>